//
//  main.cpp
//  BigIntMulti
//
//  Created by Zesheng Li on 10/30/15.
//  Copyright Â© 2015 neil. All rights reserved.
//

#include <iostream>
#include <string>
#include <chrono>
using namespace std;
static string& ltrim(string& s){
    s.erase(0, s.find_first_not_of(' '));
    return s;
}
static string& rtrim(string& s){
    s.erase(s.find_last_not_of(' ')+1);
    return s;
}
static string& trim(string &s){
    return rtrim(ltrim(s));
}

string naive_mult_unsigned2char(string sa, string sb){
    // initialize everything
    sa=trim(sa); sb=trim(sb);
    if (sa.empty() or sb.empty())
        return "0";
    const unsigned adit=(unsigned) sa.length();
    const unsigned bdit=(unsigned) sb.length();
    const unsigned pdit=adit+bdit;
    int a[adit];    // is left-right reversed
    int b[bdit];    // is left-right reversed
    unsigned p[pdit];    // p for product; is not reversed
    memset(p, 0, sizeof(p));
    char pchar[pdit];
    memset(pchar, 0, sizeof(pchar));
    
    // convert string to int array
    for (unsigned i=0; i<adit; i++){
        a[i]=sa[adit-1-i]-'0';
    }
    for (unsigned i=0; i<bdit; i++){
        b[i]=sb[bdit-1-i]-'0';
    }
    
    // get to work
    int digitprod, rem=0, carry;
    for (unsigned ib=0; ib<bdit; ib++){
        carry=0;
        for (unsigned ia=0; ia<=adit; ia++) {
            if (ia!=adit){
                digitprod=b[ib]*a[ia] + carry;
                rem=digitprod % 10;
                carry=digitprod / 10;
            }else{
                rem=carry;
            }
            
            p[pdit-1-ia-ib]+=rem;   //cout<<rem;
        }
    }
    
    //cout<<endl;
    // process raw p[]
    size_t praw, pcarry=0;
    int prem=0;
    for (unsigned ip=pdit-1; ip!=-1; ip--){
        praw=p[ip]+pcarry; //cout<<praw<<' ';
        prem=praw % 10; //cout<<prem<<' ';
        pcarry= praw /10;   //cout<<(int)p[ip]<<' ';
        p[ip]=prem;
        pchar[ip]=p[ip]+48;  // +48 int to char
    }
    //cout<<endl;
    // convert to string
    string result;
    if (pchar[0]=='0'){
        result=string(pchar+1,pdit-1);
    }else{
        result=string(pchar,pdit);
    }
    
    return result;
}

string naive_mult_p2pass(string sa, string sb){
    // initialize everything
    sa=trim(sa); sb=trim(sb);
    if (sa.empty() or sb.empty())
        return "0";
    const unsigned adit=(unsigned) sa.length() ;
    const unsigned bdit=(unsigned) sb.length();
    const unsigned pdit=adit+bdit;
    char a[adit];    // is left-right reversed
    char b[bdit];    // is left-right reversed
    char p[pdit];    // p for product; is not reversed
    memset(p, 0, sizeof(p));

    
    // convert string to int array
    for (unsigned i=0; i<adit; i++){
        a[i]=sa[adit-1-i]-'0';
    }
    for (unsigned i=0; i<bdit; i++){
        b[i]=sb[bdit-1-i]-'0';
    }
    
    // get to work
    char digitprod, rem=0, carry;
    char prem=0, pcarry=0;
    for (unsigned ib=0; ib<bdit; ib++){
        carry=0;
        for (unsigned ia=0; ia<=adit; ia++) {
            if (ia!=adit){
                digitprod=b[ib]*a[ia] + carry;
                rem=digitprod % 10;
                carry=digitprod / 10;
            }else{
                rem=carry;
            }
            
            // keep elements of p[] to single digit;
            p[pdit-1-ia-ib]+=rem+pcarry;
            pcarry= p[pdit-1-ia-ib] / 10;
            prem= p[pdit-1-ia-ib] % 10;
            p[pdit-1-ia-ib]=prem;
            
            // add 48 to all p[]
            if (ib!=bdit-1) {
                if (ia==0){
                    p[pdit-1-ia-ib]+=48;    // +48 int to char
                }
            }else{
                p[pdit-1-ia-ib]+=48;
            }
        }
    }

    // convert to string
    string result;
    if (p[0]=='0'){
        result=string(p+1,pdit-1);
    }else{
        result=string(p,pdit);
    }
    
    return result;
}

string naive_mult3(string sa, string sb){
    // initialize everything
    sa=trim(sa); sb=trim(sb);
    if (sa.empty() or sb.empty())
        return "0";
    const unsigned adit=(unsigned) sa.length() ;
    const unsigned bdit=(unsigned) sb.length();
    const unsigned pdit=adit+bdit;
    char a[adit];    // is left-right reversed
    char b[bdit];    // is left-right reversed
    char p[pdit];    // p for product; is not reversed
    memset(p, 0, sizeof(p));
    
    
    // convert string to int array
    for (unsigned i=0; i<adit; i++){
        a[i]=sa[adit-1-i]-'0';
    }
    for (unsigned i=0; i<bdit; i++){
        b[i]=sb[bdit-1-i]-'0';
    }
    
    // get to work
    char carry;
    for (unsigned ib=0; ib<bdit; ib++){
        carry=0;
        for (unsigned ia=0; ia<=adit; ia++) {
            p[pdit-1-ia-ib] += b[ib]*a[ia] + carry;
            carry= p[pdit-1-ia-ib] / 10;
            p[pdit-1-ia-ib]= p[pdit-1-ia-ib] % 10;

            // add 48 to all p[]
            if (ib!=bdit-1) {
                if (ia==0){
                    p[pdit-1-ia-ib]+=48;    // +48 int to char
                }
            }else{
                p[pdit-1-ia-ib]+=48;
            }
        }
    }
    
    // convert to string
    string result;
    if (p[0]=='0'){
        result=string(p+1,pdit-1);
    }else{
        result=string(p,pdit);
    }
    
    return result;
}

string naive_mult(string sa, string sb){
    // initialize everything
    sa=trim(sa); sb=trim(sb);
    if (sa.empty() or sb.empty())
        return "0";
    const unsigned adit=(unsigned) sa.length() ;
    const unsigned bdit=(unsigned) sb.length();
    const unsigned pdit=adit+bdit;
    char a[adit+1];    // is left-right reversed; additional 1 digit to store a 0
    char b[bdit];    // is left-right reversed
    char p[pdit];    // p for product; is not reversed
    memset(p, 0, sizeof(p));
    a[adit]=0;  // add a 0 to last of a[] (leftmost digit of largeint a)
                // otherwise when ia=adit, it's past the end of a[]
    
    // convert string to int array
    for (unsigned i=0; i<adit; i++){
        a[i]=sa[adit-1-i]-'0';
    }
    for (unsigned i=0; i<bdit; i++){
        b[i]=sb[bdit-1-i]-'0';
    }
    
    // get to work
    char carry;
    for (unsigned ib=0; ib<bdit; ib++){
        carry=0;
        for (unsigned ia=0; ia<=adit; ia++) {
            p[pdit-1-ia-ib] += b[ib]*a[ia] + carry;
            carry= p[pdit-1-ia-ib] / 10;
            p[pdit-1-ia-ib]= p[pdit-1-ia-ib] % 10;
        }
    }
    
    for (unsigned i=0; i<pdit; i++){
        p[i] += 48;
    }
    
    // convert to string
    string result;
    if (p[0]=='0'){
        result=string(p+1,pdit-1);
    }else{
        result=string(p,pdit);
    }
    
    return result;
}

int main() {
    string a="";
    string b
    
    chrono::high_resolution_clock::time_point t1, t2;

    t1 = chrono::high_resolution_clock::now();
    string hehe=naive_mult(a,b);
    t2 = chrono::high_resolution_clock::now();
    double dur=chrono::duration_cast<chrono::microseconds>( t2 - t1 ).count();
    
    /*t1 = chrono::high_resolution_clock::now();
    string hehe2=naive_mult_unsigned2char(a,b);
    t2 = chrono::high_resolution_clock::now();
    double dur2=chrono::duration_cast<chrono::microseconds>( t2 - t1 ).count();
    
    t1 = chrono::high_resolution_clock::now();
    string hehe4=naive_mult4(a,b);
    t2 = chrono::high_resolution_clock::now();
    double dur4=chrono::duration_cast<chrono::microseconds>( t2 - t1 ).count();
    
    t1 = chrono::high_resolution_clock::now();
    string hehe3=naive_mult3(a,b);
    t2 = chrono::high_resolution_clock::now();
    double dur3=chrono::duration_cast<chrono::microseconds>( t2 - t1 ).count();
    
    */
    
    
    //cout<<hehe<<endl<<endl;
    cout<<hehe<<endl;
    cout<<a.length()<<' '<<b.length()<<' '<<hehe.length()<<endl;
    cout<<"naive_mult() Time spent: "<<(dur)/1000<<" ms"<<endl;
    //cout<<"naive_mult_unsigned2char() Time spent: "<<(dur2)/1000<<" ms"<<endl;
    //cout<<"naive_mult3() Time spent: "<<(dur3)/1000<<" ms"<<endl;
    //cout<<"naive_mult4() Time spent: "<<(dur4)/1000<<" ms"<<endl;
    //cout<<"same results? "<<( (hehe2==hehe3) && (hehe3==hehe4))<<endl;
    
    return 0;
}
